{"version":3,"sources":["Square.tsx","Face.tsx","Cube.tsx","Solution.ts","App.tsx","index.tsx"],"names":["Colour","FacePosition","SquareFC","square","className","id","colour","toString","FaceFC","face","pos","squares","map","getDefaultCube","cube","faces","Array","i","squareCount","x","y","push","z","CubeFC","pushIfNotNull","array","item","getFieldTupleAtomLabel","solution","fieldLabel","atomLabels","labels","from","getElementsByTagName","field","getAttribute","tuple","match","atomId","tupleItem","length","getAlloyId","label","split","getCubeSolution","solnString","solutionXML","DOMParser","parseFromString","cubes","sigLabel","sigLabels","sigAtom","children","atom","getSigAtomLabels","cubeLabel","faceIdx","faceLabel","squareLabels","Set","lineLabel","squareLabel","add","squareId","colourId","App","useState","loading","setLoading","setCubes","selectedCube","setSelectedCube","useEffect","fetch","then","r","text","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2e5f907.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport './Square.css';\r\n\r\nexport enum Colour {\r\n   White, Yellow, Green, Blue, Red, Black\r\n}\r\n\r\nexport interface Square {\r\n   x: number,\r\n   y: number,\r\n   z: number,\r\n   id: number,\r\n   colour: Colour\r\n}\r\n\r\n// const defaultSquare: Square = {\r\n//    x: 0,\r\n//    y: 0,\r\n//    z: 0,\r\n//    id: 0,\r\n//    colour: Colour.Blue\r\n// }\r\n\r\ninterface SquareProps {\r\n   square: Square\r\n}\r\n\r\nexport const SquareFC: FC<SquareProps> = ({ square }) => {\r\n   return (\r\n      <div className={'square' + square.id +\r\n         ' square c' + square.colour.toString()} />\r\n   );\r\n}","import { FC } from 'react';\r\nimport { Square, SquareFC } from './Square';\r\nimport './Face.css';\r\n\r\nenum FacePosition {\r\n   Front, Back, Top, Bottom, Left, Right\r\n}\r\n\r\nexport interface Face {\r\n   squares: Square[],\r\n   pos: FacePosition\r\n}\r\n\r\ninterface FaceProps {\r\n   face: Face\r\n}\r\n\r\nexport const FaceFC: FC<FaceProps> = ({ face }) => {\r\n   return (\r\n      <div id={'face' + face.pos} className={'face'}>\r\n         {face.squares.map((square) => (\r\n            <SquareFC square={square} />\r\n         ))}\r\n      </div>\r\n   );\r\n}","import { FC } from 'react';\r\nimport { Face, FaceFC } from './Face';\r\nimport { Square } from './Square';\r\nimport './Cube.css';\r\n\r\nexport interface Cube {\r\n   faces: Face[]\r\n}\r\n\r\nexport const getDefaultCube = (): Cube => {\r\n   let cube: Cube = {\r\n      faces: Array<Face>()\r\n   };\r\n   for (let i = 0; i < 6; i++) {\r\n      let face: Face = {\r\n         pos: i,\r\n         squares: Array<Square>()\r\n      };\r\n      let squareCount = 0;\r\n      for (let x = 0; x < 2; x++) {\r\n         for (let y = 0; y < 2; y++) {\r\n            face.squares.push({\r\n               x: x,\r\n               y: y,\r\n               z: 0,\r\n               id: squareCount,\r\n               colour: i\r\n            });\r\n            squareCount += 1;\r\n         }\r\n      }\r\n      cube.faces.push(face);\r\n   }\r\n   return cube;\r\n}\r\n\r\ninterface CubeProps {\r\n   cube: Cube | null\r\n}\r\n\r\nexport const CubeFC: FC<CubeProps> = ({ cube }) => {\r\n   if (cube == null) return (<div></div>);\r\n\r\n   return (\r\n      <div id='cubeWrapper'>\r\n         <div id='cube'>\r\n            {cube.faces.map((face) => (\r\n               <FaceFC face={face} />\r\n            ))}\r\n         </div>\r\n      </div>\r\n   );\r\n}","import { Cube, getDefaultCube } from './Cube';\r\n\r\nconst getSigAtomLabels = (solution: Document, sigLabel: string): string[] => {\r\n    let sigLabels: string[] = [];\r\n    for (let sigAtom of Array.from(solution.getElementsByTagName('sig'))) {\r\n        if (sigAtom.getAttribute('label') === sigLabel) {\r\n            Array.from(sigAtom.children).map(atom => (\r\n                pushIfNotNull(sigLabels, atom.getAttribute('label'))\r\n            ));\r\n            break;\r\n        }\r\n    }\r\n    return sigLabels;\r\n}\r\n\r\nconst pushIfNotNull = (array: string[], item: string | null) => {\r\n    if (item !== null) array.push(item);\r\n}\r\n\r\nconst getFieldTupleAtomLabel = (solution: Document, fieldLabel: string, atomLabels: string[]): string[] => {\r\n    let labels: string[] = [];\r\n    for (let field of Array.from(solution.getElementsByTagName('field'))) {\r\n        if (field.getAttribute('label') === fieldLabel) {\r\n            for (let tuple of Array.from(field.getElementsByTagName('tuple'))) {\r\n                let match = true;\r\n                for (let atomId in atomLabels) {\r\n                    let tupleItem = tuple.getElementsByTagName('atom').item(+atomId);\r\n                    if (tupleItem !== null && tupleItem.getAttribute('label') !== atomLabels[atomId]) {\r\n                        match = false;\r\n                        break;\r\n                    }\r\n                }\r\n                let tupleItem = tuple.getElementsByTagName('atom').item(tuple.getElementsByTagName('atom').length - 1);\r\n                if (match && tupleItem !== null) {\r\n                    pushIfNotNull(labels, tupleItem.getAttribute('label'));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return labels;\r\n}\r\n\r\nconst getAlloyId = (label: string): number => {\r\n    return +label.split('$')[1];\r\n}\r\n\r\n\r\nexport const getCubeSolution = (solnString: string): Cube[] => {\r\n    let parser = new DOMParser();\r\n    const solutionXML = parser.parseFromString(solnString, 'text/xml');\r\n    let cubes: Cube[] = [getDefaultCube()];\r\n    for (let cubeLabel of getSigAtomLabels(solutionXML, 'this/Cube')) {\r\n        cubes[getAlloyId(cubeLabel)] = getDefaultCube();\r\n        let faceIdx = 0;\r\n        for (let faceLabel of getFieldTupleAtomLabel(solutionXML, 'faces', [cubeLabel])) {\r\n            let squareLabels = new Set<string>();\r\n            for (let lineLabel of getFieldTupleAtomLabel(solutionXML, 'lines', [faceLabel])) {\r\n                for (let squareLabel of getFieldTupleAtomLabel(solutionXML, 'squares', [lineLabel])) {\r\n                    squareLabels.add(squareLabel);\r\n                }\r\n            }\r\n            let squareId = 0;\r\n            for (let squareLabel of Array.from(squareLabels)) {\r\n                let colourId: number = getAlloyId(getFieldTupleAtomLabel(solutionXML, 'colours', [cubeLabel, squareLabel])[0]);\r\n                // face index should be seq int atom not the alloy id\r\n                cubes[getAlloyId(cubeLabel)].faces[faceIdx].squares[squareId].colour = colourId;\r\n                squareId++;\r\n            }\r\n            faceIdx++;\r\n        }\r\n    }\r\n    return cubes;\r\n}","import { FC, useEffect, useState } from 'react';\nimport { Cube, CubeFC, getDefaultCube } from './Cube';\nimport { getCubeSolution } from './Solution';\nimport './App.css';\n\nconst App: FC = () => {\n   const [loading, setLoading] = useState<boolean>(true);\n   const [cubes, setCubes] = useState<Cube[]>([getDefaultCube()]);\n   const [selectedCube, setSelectedCube] = useState<number>(0);\n\n   useEffect(() => {\n      fetch('/alloy-playground/solution.xml').then(r => r.text()).then(text => {\n         setCubes(getCubeSolution(text));\n         setLoading(false);\n      });\n   }, []);\n\n   return (\n      <div className=\"App\">\n         {loading && 'parsing solution'}\n         {!loading && \n            <div id='selectors'>\n               {<button className={selectedCube !== 0 ? '' : 'hide'} onClick={() => setSelectedCube(selectedCube - 1)}>{'<'}</button>}\n               <span id='selection'>{selectedCube}</span>\n               {<button className={selectedCube < cubes.length - 1 ? '' : 'hide'} onClick={() => setSelectedCube(selectedCube + 1)}>{'>'}</button>}\n            </div>\n         }\n         {!loading && <CubeFC cube={cubes[selectedCube]} />}\n      </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}